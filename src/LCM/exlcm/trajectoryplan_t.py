"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import trajectorywaypoint_t

class trajectoryplan_t(object):
    __slots__ = ["entity_type", "version_n", "valid_f", "ref_n", "timestamp_sec", "position_timestamp_sec", "valid_waypoint_count", "waypoint"]

    def __init__(self):
        self.entity_type = 0
        self.version_n = 0
        self.valid_f = False
        self.ref_n = 0
        self.timestamp_sec = 0.0
        self.position_timestamp_sec = 0.0
        self.valid_waypoint_count = 0
        self.waypoint = [ trajectorywaypoint_t() for dim0 in range(70) ]

    def encode(self):
        buf = BytesIO()
        buf.write(trajectoryplan_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hbbqddh", self.entity_type, self.version_n, self.valid_f, self.ref_n, self.timestamp_sec, self.position_timestamp_sec, self.valid_waypoint_count))
        for i0 in range(70):
            assert self.waypoint[i0]._get_packed_fingerprint() == trajectorywaypoint_t._get_packed_fingerprint()
            self.waypoint[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != trajectoryplan_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return trajectoryplan_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = trajectoryplan_t()
        self.entity_type, self.version_n = struct.unpack(">hb", buf.read(3))
        self.valid_f = bool(struct.unpack('b', buf.read(1))[0])
        self.ref_n, self.timestamp_sec, self.position_timestamp_sec, self.valid_waypoint_count = struct.unpack(">qddh", buf.read(26))
        self.waypoint = []
        for i0 in range(70):
            self.waypoint.append(trajectorywaypoint_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if trajectoryplan_t in parents: return 0
        newparents = parents + [trajectoryplan_t]
        tmphash = (0xc94196a1b86d7dc4+ trajectorywaypoint_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if trajectoryplan_t._packed_fingerprint is None:
            trajectoryplan_t._packed_fingerprint = struct.pack(">Q", trajectoryplan_t._get_hash_recursive([]))
        return trajectoryplan_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

