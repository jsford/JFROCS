"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class kinematics_t(object):
    __slots__ = ["entity_type", "version_n", "valid_f", "ref_n", "timestamp_sec", "speed_mps", "yaw_rad", "odometer_m", "moving_fwd_f", "traction_good_f", "lat_accel_mpss", "lon_accel_mpss", "vert_accel_mpss", "yawrate_rps", "pitchrate_rps", "rollrate_rps", "turning_radius_m"]

    def __init__(self):
        self.entity_type = 0
        self.version_n = 0
        self.valid_f = False
        self.ref_n = 0
        self.timestamp_sec = 0.0
        self.speed_mps = 0.0
        self.yaw_rad = 0.0
        self.odometer_m = 0.0
        self.moving_fwd_f = 0
        self.traction_good_f = 0
        self.lat_accel_mpss = 0.0
        self.lon_accel_mpss = 0.0
        self.vert_accel_mpss = 0.0
        self.yawrate_rps = 0.0
        self.pitchrate_rps = 0.0
        self.rollrate_rps = 0.0
        self.turning_radius_m = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(kinematics_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hbbqdffdbbfffffff", self.entity_type, self.version_n, self.valid_f, self.ref_n, self.timestamp_sec, self.speed_mps, self.yaw_rad, self.odometer_m, self.moving_fwd_f, self.traction_good_f, self.lat_accel_mpss, self.lon_accel_mpss, self.vert_accel_mpss, self.yawrate_rps, self.pitchrate_rps, self.rollrate_rps, self.turning_radius_m))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != kinematics_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return kinematics_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = kinematics_t()
        self.entity_type, self.version_n = struct.unpack(">hb", buf.read(3))
        self.valid_f = bool(struct.unpack('b', buf.read(1))[0])
        self.ref_n, self.timestamp_sec, self.speed_mps, self.yaw_rad, self.odometer_m, self.moving_fwd_f, self.traction_good_f, self.lat_accel_mpss, self.lon_accel_mpss, self.vert_accel_mpss, self.yawrate_rps, self.pitchrate_rps, self.rollrate_rps, self.turning_radius_m = struct.unpack(">qdffdbbfffffff", buf.read(62))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if kinematics_t in parents: return 0
        tmphash = (0x1b7e3f1e71760364) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if kinematics_t._packed_fingerprint is None:
            kinematics_t._packed_fingerprint = struct.pack(">Q", kinematics_t._get_hash_recursive([]))
        return kinematics_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

