"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class behaviorplan_t(object):
    __slots__ = ["entity_type", "version_n", "valid_f", "timestamp_sec", "ref_n", "master_state", "state_goal", "active_maneuver", "behavior_type", "left_lane_intention", "right_lane_intention", "lane_change_zone_start_m", "lane_change_zone_end_m", "speed_target_mps", "speed_target_distance_m", "lateral_accel_lim_mpss", "longitudinal_accel_lim_mpss", "longitudinal_decel_lim_mpss", "trajectory_rejected_by_controller", "cib_active_f", "manual_override_f", "reroute_needed_f"]

    def __init__(self):
        self.entity_type = 0
        self.version_n = 0
        self.valid_f = 0
        self.timestamp_sec = 0.0
        self.ref_n = 0
        self.master_state = 0
        self.state_goal = 0
        self.active_maneuver = 0
        self.behavior_type = 0
        self.left_lane_intention = 0
        self.right_lane_intention = 0
        self.lane_change_zone_start_m = 0.0
        self.lane_change_zone_end_m = 0.0
        self.speed_target_mps = 0.0
        self.speed_target_distance_m = 0.0
        self.lateral_accel_lim_mpss = 0.0
        self.longitudinal_accel_lim_mpss = 0.0
        self.longitudinal_decel_lim_mpss = 0.0
        self.trajectory_rejected_by_controller = False
        self.cib_active_f = False
        self.manual_override_f = False
        self.reroute_needed_f = False

    def encode(self):
        buf = BytesIO()
        buf.write(behaviorplan_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hbbdqhhhhhhfffffffbbbb", self.entity_type, self.version_n, self.valid_f, self.timestamp_sec, self.ref_n, self.master_state, self.state_goal, self.active_maneuver, self.behavior_type, self.left_lane_intention, self.right_lane_intention, self.lane_change_zone_start_m, self.lane_change_zone_end_m, self.speed_target_mps, self.speed_target_distance_m, self.lateral_accel_lim_mpss, self.longitudinal_accel_lim_mpss, self.longitudinal_decel_lim_mpss, self.trajectory_rejected_by_controller, self.cib_active_f, self.manual_override_f, self.reroute_needed_f))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != behaviorplan_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return behaviorplan_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = behaviorplan_t()
        self.entity_type, self.version_n, self.valid_f, self.timestamp_sec, self.ref_n, self.master_state, self.state_goal, self.active_maneuver, self.behavior_type, self.left_lane_intention, self.right_lane_intention, self.lane_change_zone_start_m, self.lane_change_zone_end_m, self.speed_target_mps, self.speed_target_distance_m, self.lateral_accel_lim_mpss, self.longitudinal_accel_lim_mpss, self.longitudinal_decel_lim_mpss = struct.unpack(">hbbdqhhhhhhfffffff", buf.read(60))
        self.trajectory_rejected_by_controller = bool(struct.unpack('b', buf.read(1))[0])
        self.cib_active_f = bool(struct.unpack('b', buf.read(1))[0])
        self.manual_override_f = bool(struct.unpack('b', buf.read(1))[0])
        self.reroute_needed_f = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if behaviorplan_t in parents: return 0
        tmphash = (0x44fdfb4144026979) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if behaviorplan_t._packed_fingerprint is None:
            behaviorplan_t._packed_fingerprint = struct.pack(">Q", behaviorplan_t._get_hash_recursive([]))
        return behaviorplan_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

