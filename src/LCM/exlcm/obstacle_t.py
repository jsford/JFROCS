"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import stixel_t

class obstacle_t(object):
    __slots__ = ["entity_type", "version_n", "valid_f", "ref_n", "timestamp_sec", "rolling_count", "num_of_msg", "msg_index_number", "id", "quality", "objtype", "width_m", "length_m", "height_m", "x_m", "y_m", "velocity_mps", "phi_rad", "omega_rps", "closest_x_m", "closest_y_m", "sensorsource_flags", "dynamic_property", "rel_lane", "tracking_cycles", "long_accel_mpss", "rel_vel_mps", "rel_phi_rad", "rel_omega_rps", "convex_hull_npts", "convex_hull_point", "stixel_npts", "stixel_point"]

    def __init__(self):
        self.entity_type = 0
        self.version_n = 0
        self.valid_f = 0
        self.ref_n = 0
        self.timestamp_sec = 0.0
        self.rolling_count = 0
        self.num_of_msg = 0
        self.msg_index_number = 0
        self.id = 0
        self.quality = 0
        self.objtype = 0
        self.width_m = 0.0
        self.length_m = 0.0
        self.height_m = 0.0
        self.x_m = 0.0
        self.y_m = 0.0
        self.velocity_mps = 0.0
        self.phi_rad = 0.0
        self.omega_rps = 0.0
        self.closest_x_m = 0.0
        self.closest_y_m = 0.0
        self.sensorsource_flags = 0
        self.dynamic_property = 0
        self.rel_lane = 0
        self.tracking_cycles = 0
        self.long_accel_mpss = 0.0
        self.rel_vel_mps = 0.0
        self.rel_phi_rad = 0.0
        self.rel_omega_rps = 0.0
        self.convex_hull_npts = 0
        self.convex_hull_point = []
        self.stixel_npts = 0
        self.stixel_point = []

    def encode(self):
        buf = BytesIO()
        buf.write(obstacle_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hbbqdbbbibbffffffffffibbhffffh", self.entity_type, self.version_n, self.valid_f, self.ref_n, self.timestamp_sec, self.rolling_count, self.num_of_msg, self.msg_index_number, self.id, self.quality, self.objtype, self.width_m, self.length_m, self.height_m, self.x_m, self.y_m, self.velocity_mps, self.phi_rad, self.omega_rps, self.closest_x_m, self.closest_y_m, self.sensorsource_flags, self.dynamic_property, self.rel_lane, self.tracking_cycles, self.long_accel_mpss, self.rel_vel_mps, self.rel_phi_rad, self.rel_omega_rps, self.convex_hull_npts))
        for i0 in range(self.convex_hull_npts):
            assert self.convex_hull_point[i0]._get_packed_fingerprint() == exlcm.stixel_t._get_packed_fingerprint()
            self.convex_hull_point[i0]._encode_one(buf)
        buf.write(struct.pack(">h", self.stixel_npts))
        for i0 in range(self.stixel_npts):
            assert self.stixel_point[i0]._get_packed_fingerprint() == exlcm.stixel_t._get_packed_fingerprint()
            self.stixel_point[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != obstacle_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return obstacle_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = obstacle_t()
        self.entity_type, self.version_n, self.valid_f, self.ref_n, self.timestamp_sec, self.rolling_count, self.num_of_msg, self.msg_index_number, self.id, self.quality, self.objtype, self.width_m, self.length_m, self.height_m, self.x_m, self.y_m, self.velocity_mps, self.phi_rad, self.omega_rps, self.closest_x_m, self.closest_y_m, self.sensorsource_flags, self.dynamic_property, self.rel_lane, self.tracking_cycles, self.long_accel_mpss, self.rel_vel_mps, self.rel_phi_rad, self.rel_omega_rps, self.convex_hull_npts = struct.unpack(">hbbqdbbbibbffffffffffibbhffffh", buf.read(95))
        self.convex_hull_point = []
        for i0 in range(self.convex_hull_npts):
            self.convex_hull_point.append(exlcm.stixel_t._decode_one(buf))
        self.stixel_npts = struct.unpack(">h", buf.read(2))[0]
        self.stixel_point = []
        for i0 in range(self.stixel_npts):
            self.stixel_point.append(exlcm.stixel_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if obstacle_t in parents: return 0
        newparents = parents + [obstacle_t]
        tmphash = (0x326add9236ac2a99+ exlcm.stixel_t._get_hash_recursive(newparents)+ exlcm.stixel_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if obstacle_t._packed_fingerprint is None:
            obstacle_t._packed_fingerprint = struct.pack(">Q", obstacle_t._get_hash_recursive([]))
        return obstacle_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

