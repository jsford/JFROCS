"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class positionpose_t(object):
    __slots__ = ["entity_type", "version_n", "valid_f", "ref_n", "timestamp_sec", "pos_pose_timestamp_sec", "latitude_deg", "longitude_deg", "altitude_m", "yaw_rad", "heading_deg", "pitch_rad", "roll_rad", "maplet_iteration_n", "ref_latitude_deg", "ref_longitude_deg", "ref_altitude_m", "east_m", "north_m", "up_m", "position_pose_source", "heading_trusted", "position_uncert_m", "hdop", "gps_fix_type", "filter_flags", "alarm_flags"]

    def __init__(self):
        self.entity_type = 0
        self.version_n = 0
        self.valid_f = False
        self.ref_n = 0
        self.timestamp_sec = 0.0
        self.pos_pose_timestamp_sec = 0.0
        self.latitude_deg = 0.0
        self.longitude_deg = 0.0
        self.altitude_m = 0.0
        self.yaw_rad = 0.0
        self.heading_deg = 0.0
        self.pitch_rad = 0.0
        self.roll_rad = 0.0
        self.maplet_iteration_n = 0
        self.ref_latitude_deg = 0.0
        self.ref_longitude_deg = 0.0
        self.ref_altitude_m = 0.0
        self.east_m = 0.0
        self.north_m = 0.0
        self.up_m = 0.0
        self.position_pose_source = 0
        self.heading_trusted = 0
        self.position_uncert_m = 0.0
        self.hdop = 0.0
        self.gps_fix_type = 0
        self.filter_flags = 0
        self.alarm_flags = 0

    def encode(self):
        buf = BytesIO()
        buf.write(positionpose_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hbbqddddfffffhddffffhhffhhh", self.entity_type, self.version_n, self.valid_f, self.ref_n, self.timestamp_sec, self.pos_pose_timestamp_sec, self.latitude_deg, self.longitude_deg, self.altitude_m, self.yaw_rad, self.heading_deg, self.pitch_rad, self.roll_rad, self.maplet_iteration_n, self.ref_latitude_deg, self.ref_longitude_deg, self.ref_altitude_m, self.east_m, self.north_m, self.up_m, self.position_pose_source, self.heading_trusted, self.position_uncert_m, self.hdop, self.gps_fix_type, self.filter_flags, self.alarm_flags))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != positionpose_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return positionpose_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = positionpose_t()
        self.entity_type, self.version_n = struct.unpack(">hb", buf.read(3))
        self.valid_f = bool(struct.unpack('b', buf.read(1))[0])
        self.ref_n, self.timestamp_sec, self.pos_pose_timestamp_sec, self.latitude_deg, self.longitude_deg, self.altitude_m, self.yaw_rad, self.heading_deg, self.pitch_rad, self.roll_rad, self.maplet_iteration_n, self.ref_latitude_deg, self.ref_longitude_deg, self.ref_altitude_m, self.east_m, self.north_m, self.up_m, self.position_pose_source, self.heading_trusted, self.position_uncert_m, self.hdop, self.gps_fix_type, self.filter_flags, self.alarm_flags = struct.unpack(">qddddfffffhddffffhhffhhh", buf.read(112))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if positionpose_t in parents: return 0
        tmphash = (0x4114c7f1b02dfae2) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if positionpose_t._packed_fingerprint is None:
            positionpose_t._packed_fingerprint = struct.pack(">Q", positionpose_t._get_hash_recursive([]))
        return positionpose_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

